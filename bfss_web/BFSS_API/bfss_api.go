// Autogenerated by Thrift Compiler (0.12.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package BFSS_API

import (
	"bytes"
	"context"
	"reflect"
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
	"bfssproject/bfss_web/bfss"

)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = context.Background
var _ = reflect.DeepEqual
var _ = bytes.Equal

var _ = bfss.GoUnusedProtection__
// Attributes:
//  - ObjectSize
//  - CreateTime
//  - ObjectFlag
//  - ObjectTag
//  - Complete
//  - Hash
type OBJECT_INFO struct {
  ObjectSize int32 `thrift:"ObjectSize,1,required" db:"ObjectSize" json:"ObjectSize"`
  CreateTime int64 `thrift:"CreateTime,2,required" db:"CreateTime" json:"CreateTime"`
  ObjectFlag int32 `thrift:"ObjectFlag,3,required" db:"ObjectFlag" json:"ObjectFlag"`
  ObjectTag string `thrift:"ObjectTag,4,required" db:"ObjectTag" json:"ObjectTag"`
  Complete bool `thrift:"Complete,5,required" db:"Complete" json:"Complete"`
  Hash string `thrift:"Hash,6,required" db:"Hash" json:"Hash"`
}

func NewOBJECT_INFO() *OBJECT_INFO {
  return &OBJECT_INFO{}
}


func (p *OBJECT_INFO) GetObjectSize() int32 {
  return p.ObjectSize
}

func (p *OBJECT_INFO) GetCreateTime() int64 {
  return p.CreateTime
}

func (p *OBJECT_INFO) GetObjectFlag() int32 {
  return p.ObjectFlag
}

func (p *OBJECT_INFO) GetObjectTag() string {
  return p.ObjectTag
}

func (p *OBJECT_INFO) GetComplete() bool {
  return p.Complete
}

func (p *OBJECT_INFO) GetHash() string {
  return p.Hash
}
func (p *OBJECT_INFO) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetObjectSize bool = false;
  var issetCreateTime bool = false;
  var issetObjectFlag bool = false;
  var issetObjectTag bool = false;
  var issetComplete bool = false;
  var issetHash bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
        issetObjectSize = true
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
        issetCreateTime = true
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
        issetObjectFlag = true
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
        issetObjectTag = true
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
        issetComplete = true
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
        issetHash = true
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetObjectSize{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ObjectSize is not set"));
  }
  if !issetCreateTime{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field CreateTime is not set"));
  }
  if !issetObjectFlag{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ObjectFlag is not set"));
  }
  if !issetObjectTag{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ObjectTag is not set"));
  }
  if !issetComplete{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Complete is not set"));
  }
  if !issetHash{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Hash is not set"));
  }
  return nil
}

func (p *OBJECT_INFO)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ObjectSize = v
}
  return nil
}

func (p *OBJECT_INFO)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.CreateTime = v
}
  return nil
}

func (p *OBJECT_INFO)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.ObjectFlag = v
}
  return nil
}

func (p *OBJECT_INFO)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.ObjectTag = v
}
  return nil
}

func (p *OBJECT_INFO)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.Complete = v
}
  return nil
}

func (p *OBJECT_INFO)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.Hash = v
}
  return nil
}

func (p *OBJECT_INFO) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("OBJECT_INFO"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *OBJECT_INFO) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("ObjectSize", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ObjectSize: ", p), err) }
  if err := oprot.WriteI32(int32(p.ObjectSize)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.ObjectSize (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ObjectSize: ", p), err) }
  return err
}

func (p *OBJECT_INFO) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("CreateTime", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:CreateTime: ", p), err) }
  if err := oprot.WriteI64(int64(p.CreateTime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.CreateTime (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:CreateTime: ", p), err) }
  return err
}

func (p *OBJECT_INFO) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("ObjectFlag", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:ObjectFlag: ", p), err) }
  if err := oprot.WriteI32(int32(p.ObjectFlag)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.ObjectFlag (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:ObjectFlag: ", p), err) }
  return err
}

func (p *OBJECT_INFO) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("ObjectTag", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:ObjectTag: ", p), err) }
  if err := oprot.WriteString(string(p.ObjectTag)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.ObjectTag (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:ObjectTag: ", p), err) }
  return err
}

func (p *OBJECT_INFO) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("Complete", thrift.BOOL, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:Complete: ", p), err) }
  if err := oprot.WriteBool(bool(p.Complete)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.Complete (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:Complete: ", p), err) }
  return err
}

func (p *OBJECT_INFO) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("Hash", thrift.STRING, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:Hash: ", p), err) }
  if err := oprot.WriteString(string(p.Hash)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.Hash (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:Hash: ", p), err) }
  return err
}

func (p *OBJECT_INFO) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("OBJECT_INFO(%+v)", *p)
}

// Attributes:
//  - Result_
//  - ObjectInfo
type OBJECT_INFO_RESULT struct {
  Result_ bfss.BFSS_RESULT `thrift:"Result,1,required" db:"Result" json:"Result"`
  ObjectInfo *OBJECT_INFO `thrift:"ObjectInfo,2" db:"ObjectInfo" json:"ObjectInfo,omitempty"`
}

func NewOBJECT_INFO_RESULT() *OBJECT_INFO_RESULT {
  return &OBJECT_INFO_RESULT{}
}


func (p *OBJECT_INFO_RESULT) GetResult_() bfss.BFSS_RESULT {
  return p.Result_
}
var OBJECT_INFO_RESULT_ObjectInfo_DEFAULT *OBJECT_INFO
func (p *OBJECT_INFO_RESULT) GetObjectInfo() *OBJECT_INFO {
  if !p.IsSetObjectInfo() {
    return OBJECT_INFO_RESULT_ObjectInfo_DEFAULT
  }
return p.ObjectInfo
}
func (p *OBJECT_INFO_RESULT) IsSetObjectInfo() bool {
  return p.ObjectInfo != nil
}

func (p *OBJECT_INFO_RESULT) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetResult_ bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
        issetResult_ = true
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetResult_{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Result_ is not set"));
  }
  return nil
}

func (p *OBJECT_INFO_RESULT)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := bfss.BFSS_RESULT(v)
  p.Result_ = temp
}
  return nil
}

func (p *OBJECT_INFO_RESULT)  ReadField2(iprot thrift.TProtocol) error {
  p.ObjectInfo = &OBJECT_INFO{}
  if err := p.ObjectInfo.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ObjectInfo), err)
  }
  return nil
}

func (p *OBJECT_INFO_RESULT) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("OBJECT_INFO_RESULT"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *OBJECT_INFO_RESULT) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("Result", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:Result: ", p), err) }
  if err := oprot.WriteI32(int32(p.Result_)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.Result (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:Result: ", p), err) }
  return err
}

func (p *OBJECT_INFO_RESULT) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetObjectInfo() {
    if err := oprot.WriteFieldBegin("ObjectInfo", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ObjectInfo: ", p), err) }
    if err := p.ObjectInfo.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ObjectInfo), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ObjectInfo: ", p), err) }
  }
  return err
}

func (p *OBJECT_INFO_RESULT) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("OBJECT_INFO_RESULT(%+v)", *p)
}

// Attributes:
//  - Result_
//  - Data
type READ_RESULT struct {
  Result_ bfss.BFSS_RESULT `thrift:"Result,1,required" db:"Result" json:"Result"`
  Data []byte `thrift:"Data,2" db:"Data" json:"Data,omitempty"`
}

func NewREAD_RESULT() *READ_RESULT {
  return &READ_RESULT{}
}


func (p *READ_RESULT) GetResult_() bfss.BFSS_RESULT {
  return p.Result_
}
var READ_RESULT_Data_DEFAULT []byte

func (p *READ_RESULT) GetData() []byte {
  return p.Data
}
func (p *READ_RESULT) IsSetData() bool {
  return p.Data != nil
}

func (p *READ_RESULT) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetResult_ bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
        issetResult_ = true
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetResult_{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Result_ is not set"));
  }
  return nil
}

func (p *READ_RESULT)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := bfss.BFSS_RESULT(v)
  p.Result_ = temp
}
  return nil
}

func (p *READ_RESULT)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Data = v
}
  return nil
}

func (p *READ_RESULT) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("READ_RESULT"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *READ_RESULT) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("Result", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:Result: ", p), err) }
  if err := oprot.WriteI32(int32(p.Result_)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.Result (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:Result: ", p), err) }
  return err
}

func (p *READ_RESULT) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetData() {
    if err := oprot.WriteFieldBegin("Data", thrift.STRING, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:Data: ", p), err) }
    if err := oprot.WriteBinary(p.Data); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.Data (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:Data: ", p), err) }
  }
  return err
}

func (p *READ_RESULT) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("READ_RESULT(%+v)", *p)
}

// Attributes:
//  - Result_
//  - BlkKey
type BLK_KEY_RESULT struct {
  Result_ bfss.BFSS_RESULT `thrift:"Result,1,required" db:"Result" json:"Result"`
  BlkKey []byte `thrift:"BlkKey,2,required" db:"BlkKey" json:"BlkKey"`
}

func NewBLK_KEY_RESULT() *BLK_KEY_RESULT {
  return &BLK_KEY_RESULT{}
}


func (p *BLK_KEY_RESULT) GetResult_() bfss.BFSS_RESULT {
  return p.Result_
}

func (p *BLK_KEY_RESULT) GetBlkKey() []byte {
  return p.BlkKey
}
func (p *BLK_KEY_RESULT) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetResult_ bool = false;
  var issetBlkKey bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
        issetResult_ = true
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
        issetBlkKey = true
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetResult_{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Result_ is not set"));
  }
  if !issetBlkKey{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field BlkKey is not set"));
  }
  return nil
}

func (p *BLK_KEY_RESULT)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := bfss.BFSS_RESULT(v)
  p.Result_ = temp
}
  return nil
}

func (p *BLK_KEY_RESULT)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.BlkKey = v
}
  return nil
}

func (p *BLK_KEY_RESULT) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("BLK_KEY_RESULT"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BLK_KEY_RESULT) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("Result", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:Result: ", p), err) }
  if err := oprot.WriteI32(int32(p.Result_)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.Result (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:Result: ", p), err) }
  return err
}

func (p *BLK_KEY_RESULT) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("BlkKey", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:BlkKey: ", p), err) }
  if err := oprot.WriteBinary(p.BlkKey); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.BlkKey (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:BlkKey: ", p), err) }
  return err
}

func (p *BLK_KEY_RESULT) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BLK_KEY_RESULT(%+v)", *p)
}

// Attributes:
//  - BlkSize
//  - DataOff
//  - VolumeId
//  - BlkIndex
//  - BlkKey
type OBJECT_BLK_INFO struct {
  BlkSize int32 `thrift:"BlkSize,1,required" db:"BlkSize" json:"BlkSize"`
  DataOff int32 `thrift:"DataOff,2,required" db:"DataOff" json:"DataOff"`
  VolumeId int32 `thrift:"VolumeId,3,required" db:"VolumeId" json:"VolumeId"`
  BlkIndex int32 `thrift:"BlkIndex,4,required" db:"BlkIndex" json:"BlkIndex"`
  BlkKey []byte `thrift:"BlkKey,5,required" db:"BlkKey" json:"BlkKey"`
}

func NewOBJECT_BLK_INFO() *OBJECT_BLK_INFO {
  return &OBJECT_BLK_INFO{}
}


func (p *OBJECT_BLK_INFO) GetBlkSize() int32 {
  return p.BlkSize
}

func (p *OBJECT_BLK_INFO) GetDataOff() int32 {
  return p.DataOff
}

func (p *OBJECT_BLK_INFO) GetVolumeId() int32 {
  return p.VolumeId
}

func (p *OBJECT_BLK_INFO) GetBlkIndex() int32 {
  return p.BlkIndex
}

func (p *OBJECT_BLK_INFO) GetBlkKey() []byte {
  return p.BlkKey
}
func (p *OBJECT_BLK_INFO) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetBlkSize bool = false;
  var issetDataOff bool = false;
  var issetVolumeId bool = false;
  var issetBlkIndex bool = false;
  var issetBlkKey bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
        issetBlkSize = true
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
        issetDataOff = true
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
        issetVolumeId = true
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
        issetBlkIndex = true
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
        issetBlkKey = true
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetBlkSize{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field BlkSize is not set"));
  }
  if !issetDataOff{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field DataOff is not set"));
  }
  if !issetVolumeId{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field VolumeId is not set"));
  }
  if !issetBlkIndex{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field BlkIndex is not set"));
  }
  if !issetBlkKey{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field BlkKey is not set"));
  }
  return nil
}

func (p *OBJECT_BLK_INFO)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.BlkSize = v
}
  return nil
}

func (p *OBJECT_BLK_INFO)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.DataOff = v
}
  return nil
}

func (p *OBJECT_BLK_INFO)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.VolumeId = v
}
  return nil
}

func (p *OBJECT_BLK_INFO)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.BlkIndex = v
}
  return nil
}

func (p *OBJECT_BLK_INFO)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.BlkKey = v
}
  return nil
}

func (p *OBJECT_BLK_INFO) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("OBJECT_BLK_INFO"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *OBJECT_BLK_INFO) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("BlkSize", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:BlkSize: ", p), err) }
  if err := oprot.WriteI32(int32(p.BlkSize)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.BlkSize (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:BlkSize: ", p), err) }
  return err
}

func (p *OBJECT_BLK_INFO) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("DataOff", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:DataOff: ", p), err) }
  if err := oprot.WriteI32(int32(p.DataOff)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.DataOff (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:DataOff: ", p), err) }
  return err
}

func (p *OBJECT_BLK_INFO) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("VolumeId", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:VolumeId: ", p), err) }
  if err := oprot.WriteI32(int32(p.VolumeId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.VolumeId (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:VolumeId: ", p), err) }
  return err
}

func (p *OBJECT_BLK_INFO) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("BlkIndex", thrift.I32, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:BlkIndex: ", p), err) }
  if err := oprot.WriteI32(int32(p.BlkIndex)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.BlkIndex (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:BlkIndex: ", p), err) }
  return err
}

func (p *OBJECT_BLK_INFO) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("BlkKey", thrift.STRING, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:BlkKey: ", p), err) }
  if err := oprot.WriteBinary(p.BlkKey); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.BlkKey (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:BlkKey: ", p), err) }
  return err
}

func (p *OBJECT_BLK_INFO) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("OBJECT_BLK_INFO(%+v)", *p)
}

// Attributes:
//  - ObjectInfo
//  - Blks
type OBJECT_BLKS_INFO struct {
  ObjectInfo *OBJECT_INFO `thrift:"ObjectInfo,1,required" db:"ObjectInfo" json:"ObjectInfo"`
  Blks []*OBJECT_BLK_INFO `thrift:"Blks,2,required" db:"Blks" json:"Blks"`
}

func NewOBJECT_BLKS_INFO() *OBJECT_BLKS_INFO {
  return &OBJECT_BLKS_INFO{}
}

var OBJECT_BLKS_INFO_ObjectInfo_DEFAULT *OBJECT_INFO
func (p *OBJECT_BLKS_INFO) GetObjectInfo() *OBJECT_INFO {
  if !p.IsSetObjectInfo() {
    return OBJECT_BLKS_INFO_ObjectInfo_DEFAULT
  }
return p.ObjectInfo
}

func (p *OBJECT_BLKS_INFO) GetBlks() []*OBJECT_BLK_INFO {
  return p.Blks
}
func (p *OBJECT_BLKS_INFO) IsSetObjectInfo() bool {
  return p.ObjectInfo != nil
}

func (p *OBJECT_BLKS_INFO) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetObjectInfo bool = false;
  var issetBlks bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
        issetObjectInfo = true
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
        issetBlks = true
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetObjectInfo{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ObjectInfo is not set"));
  }
  if !issetBlks{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Blks is not set"));
  }
  return nil
}

func (p *OBJECT_BLKS_INFO)  ReadField1(iprot thrift.TProtocol) error {
  p.ObjectInfo = &OBJECT_INFO{}
  if err := p.ObjectInfo.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ObjectInfo), err)
  }
  return nil
}

func (p *OBJECT_BLKS_INFO)  ReadField2(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*OBJECT_BLK_INFO, 0, size)
  p.Blks =  tSlice
  for i := 0; i < size; i ++ {
    _elem0 := &OBJECT_BLK_INFO{}
    if err := _elem0.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem0), err)
    }
    p.Blks = append(p.Blks, _elem0)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *OBJECT_BLKS_INFO) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("OBJECT_BLKS_INFO"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *OBJECT_BLKS_INFO) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("ObjectInfo", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ObjectInfo: ", p), err) }
  if err := p.ObjectInfo.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ObjectInfo), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ObjectInfo: ", p), err) }
  return err
}

func (p *OBJECT_BLKS_INFO) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("Blks", thrift.LIST, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:Blks: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Blks)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Blks {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:Blks: ", p), err) }
  return err
}

func (p *OBJECT_BLKS_INFO) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("OBJECT_BLKS_INFO(%+v)", *p)
}

// Attributes:
//  - Result_
//  - ObjectBlksInfo
type OBJECT_BLKS_RESULT struct {
  Result_ bfss.BFSS_RESULT `thrift:"Result,1,required" db:"Result" json:"Result"`
  ObjectBlksInfo *OBJECT_BLKS_INFO `thrift:"ObjectBlksInfo,2" db:"ObjectBlksInfo" json:"ObjectBlksInfo,omitempty"`
}

func NewOBJECT_BLKS_RESULT() *OBJECT_BLKS_RESULT {
  return &OBJECT_BLKS_RESULT{}
}


func (p *OBJECT_BLKS_RESULT) GetResult_() bfss.BFSS_RESULT {
  return p.Result_
}
var OBJECT_BLKS_RESULT_ObjectBlksInfo_DEFAULT *OBJECT_BLKS_INFO
func (p *OBJECT_BLKS_RESULT) GetObjectBlksInfo() *OBJECT_BLKS_INFO {
  if !p.IsSetObjectBlksInfo() {
    return OBJECT_BLKS_RESULT_ObjectBlksInfo_DEFAULT
  }
return p.ObjectBlksInfo
}
func (p *OBJECT_BLKS_RESULT) IsSetObjectBlksInfo() bool {
  return p.ObjectBlksInfo != nil
}

func (p *OBJECT_BLKS_RESULT) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetResult_ bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
        issetResult_ = true
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetResult_{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Result_ is not set"));
  }
  return nil
}

func (p *OBJECT_BLKS_RESULT)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := bfss.BFSS_RESULT(v)
  p.Result_ = temp
}
  return nil
}

func (p *OBJECT_BLKS_RESULT)  ReadField2(iprot thrift.TProtocol) error {
  p.ObjectBlksInfo = &OBJECT_BLKS_INFO{}
  if err := p.ObjectBlksInfo.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ObjectBlksInfo), err)
  }
  return nil
}

func (p *OBJECT_BLKS_RESULT) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("OBJECT_BLKS_RESULT"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *OBJECT_BLKS_RESULT) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("Result", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:Result: ", p), err) }
  if err := oprot.WriteI32(int32(p.Result_)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.Result (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:Result: ", p), err) }
  return err
}

func (p *OBJECT_BLKS_RESULT) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetObjectBlksInfo() {
    if err := oprot.WriteFieldBegin("ObjectBlksInfo", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ObjectBlksInfo: ", p), err) }
    if err := p.ObjectBlksInfo.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ObjectBlksInfo), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ObjectBlksInfo: ", p), err) }
  }
  return err
}

func (p *OBJECT_BLKS_RESULT) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("OBJECT_BLKS_RESULT(%+v)", *p)
}

// Attributes:
//  - Param
//  - ParamEx
//  - DataEx
type BFSS_MESSAGE struct {
  Param *int32 `thrift:"Param,1" db:"Param" json:"Param,omitempty"`
  ParamEx *int32 `thrift:"ParamEx,2" db:"ParamEx" json:"ParamEx,omitempty"`
  DataEx []byte `thrift:"DataEx,3" db:"DataEx" json:"DataEx,omitempty"`
}

func NewBFSS_MESSAGE() *BFSS_MESSAGE {
  return &BFSS_MESSAGE{}
}

var BFSS_MESSAGE_Param_DEFAULT int32
func (p *BFSS_MESSAGE) GetParam() int32 {
  if !p.IsSetParam() {
    return BFSS_MESSAGE_Param_DEFAULT
  }
return *p.Param
}
var BFSS_MESSAGE_ParamEx_DEFAULT int32
func (p *BFSS_MESSAGE) GetParamEx() int32 {
  if !p.IsSetParamEx() {
    return BFSS_MESSAGE_ParamEx_DEFAULT
  }
return *p.ParamEx
}
var BFSS_MESSAGE_DataEx_DEFAULT []byte

func (p *BFSS_MESSAGE) GetDataEx() []byte {
  return p.DataEx
}
func (p *BFSS_MESSAGE) IsSetParam() bool {
  return p.Param != nil
}

func (p *BFSS_MESSAGE) IsSetParamEx() bool {
  return p.ParamEx != nil
}

func (p *BFSS_MESSAGE) IsSetDataEx() bool {
  return p.DataEx != nil
}

func (p *BFSS_MESSAGE) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BFSS_MESSAGE)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Param = &v
}
  return nil
}

func (p *BFSS_MESSAGE)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ParamEx = &v
}
  return nil
}

func (p *BFSS_MESSAGE)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.DataEx = v
}
  return nil
}

func (p *BFSS_MESSAGE) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("BFSS_MESSAGE"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BFSS_MESSAGE) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetParam() {
    if err := oprot.WriteFieldBegin("Param", thrift.I32, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:Param: ", p), err) }
    if err := oprot.WriteI32(int32(*p.Param)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.Param (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:Param: ", p), err) }
  }
  return err
}

func (p *BFSS_MESSAGE) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetParamEx() {
    if err := oprot.WriteFieldBegin("ParamEx", thrift.I32, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ParamEx: ", p), err) }
    if err := oprot.WriteI32(int32(*p.ParamEx)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.ParamEx (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ParamEx: ", p), err) }
  }
  return err
}

func (p *BFSS_MESSAGE) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetDataEx() {
    if err := oprot.WriteFieldBegin("DataEx", thrift.STRING, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:DataEx: ", p), err) }
    if err := oprot.WriteBinary(p.DataEx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.DataEx (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:DataEx: ", p), err) }
  }
  return err
}

func (p *BFSS_MESSAGE) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BFSS_MESSAGE(%+v)", *p)
}

// Attributes:
//  - Result_
//  - BFSSMsg
type MESSAGE_RESULT struct {
  Result_ bfss.BFSS_RESULT `thrift:"Result,1,required" db:"Result" json:"Result"`
  BFSSMsg *BFSS_MESSAGE `thrift:"BFSSMsg,2" db:"BFSSMsg" json:"BFSSMsg,omitempty"`
}

func NewMESSAGE_RESULT() *MESSAGE_RESULT {
  return &MESSAGE_RESULT{}
}


func (p *MESSAGE_RESULT) GetResult_() bfss.BFSS_RESULT {
  return p.Result_
}
var MESSAGE_RESULT_BFSSMsg_DEFAULT *BFSS_MESSAGE
func (p *MESSAGE_RESULT) GetBFSSMsg() *BFSS_MESSAGE {
  if !p.IsSetBFSSMsg() {
    return MESSAGE_RESULT_BFSSMsg_DEFAULT
  }
return p.BFSSMsg
}
func (p *MESSAGE_RESULT) IsSetBFSSMsg() bool {
  return p.BFSSMsg != nil
}

func (p *MESSAGE_RESULT) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetResult_ bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
        issetResult_ = true
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetResult_{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Result_ is not set"));
  }
  return nil
}

func (p *MESSAGE_RESULT)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := bfss.BFSS_RESULT(v)
  p.Result_ = temp
}
  return nil
}

func (p *MESSAGE_RESULT)  ReadField2(iprot thrift.TProtocol) error {
  p.BFSSMsg = &BFSS_MESSAGE{}
  if err := p.BFSSMsg.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.BFSSMsg), err)
  }
  return nil
}

func (p *MESSAGE_RESULT) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("MESSAGE_RESULT"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MESSAGE_RESULT) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("Result", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:Result: ", p), err) }
  if err := oprot.WriteI32(int32(p.Result_)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.Result (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:Result: ", p), err) }
  return err
}

func (p *MESSAGE_RESULT) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetBFSSMsg() {
    if err := oprot.WriteFieldBegin("BFSSMsg", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:BFSSMsg: ", p), err) }
    if err := p.BFSSMsg.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.BFSSMsg), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:BFSSMsg: ", p), err) }
  }
  return err
}

func (p *MESSAGE_RESULT) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MESSAGE_RESULT(%+v)", *p)
}

type BFSS_APID interface {
  GetVersion(ctx context.Context) (r string, err error)
  // Parameters:
  //  - Oid
  //  - Size
  //  - Flag
  //  - Tag
  CreateObject(ctx context.Context, oid string, size int32, flag int32, tag string) (r bfss.BFSS_RESULT, err error)
  // Parameters:
  //  - Oid
  DeleteObject(ctx context.Context, oid string) (r bfss.BFSS_RESULT, err error)
  // Parameters:
  //  - Oid
  //  - Offset
  //  - Data
  Write(ctx context.Context, oid string, offset int32, data []byte) (r bfss.BFSS_RESULT, err error)
  // Parameters:
  //  - Oid
  //  - Newsize_
  ResizeObject(ctx context.Context, oid string, newsize int32) (r bfss.BFSS_RESULT, err error)
  // Parameters:
  //  - Oid
  CompleteObject(ctx context.Context, oid string) (r bfss.BFSS_RESULT, err error)
  // Parameters:
  //  - Oid
  GetObjectInfo(ctx context.Context, oid string) (r *OBJECT_INFO_RESULT, err error)
  // Parameters:
  //  - Hash
  //  - Size
  //  - Head
  ObjectLockHasHash(ctx context.Context, hash string, size int32, head []byte) (r bfss.BFSS_RESULT, err error)
  // Parameters:
  //  - Oid
  //  - Hash
  //  - Size
  //  - Head
  //  - Flag
  //  - Tag
  CreateObjectLink(ctx context.Context, oid string, hash string, size int32, head []byte, flag int32, tag string) (r bfss.BFSS_RESULT, err error)
  // Parameters:
  //  - Oid
  //  - Size
  //  - Offset
  Read(ctx context.Context, oid string, size int32, offset int32) (r *READ_RESULT, err error)
  // Parameters:
  //  - Oid
  //  - Size
  //  - Offset
  ReadBlk(ctx context.Context, oid string, size int32, offset int32) (r *READ_RESULT, err error)
  // Parameters:
  //  - Oid
  GetObjectBlksInfo(ctx context.Context, oid string) (r *OBJECT_BLKS_RESULT, err error)
  // Parameters:
  //  - Oid
  //  - Offset
  GetObjectBlkKey(ctx context.Context, oid string, offset int32) (r *BLK_KEY_RESULT, err error)
  // Parameters:
  //  - CmdId
  //  - Param
  //  - Data
  ManageMessage(ctx context.Context, CmdId int32, Param int32, Data []byte) (r *MESSAGE_RESULT, err error)
}

type BFSS_APIDClient struct {
  c thrift.TClient
}

func NewBFSS_APIDClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *BFSS_APIDClient {
  return &BFSS_APIDClient{
    c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
  }
}

func NewBFSS_APIDClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *BFSS_APIDClient {
  return &BFSS_APIDClient{
    c: thrift.NewTStandardClient(iprot, oprot),
  }
}

func NewBFSS_APIDClient(c thrift.TClient) *BFSS_APIDClient {
  return &BFSS_APIDClient{
    c: c,
  }
}

func (p *BFSS_APIDClient) Client_() thrift.TClient {
  return p.c
}
func (p *BFSS_APIDClient) GetVersion(ctx context.Context) (r string, err error) {
  var _args1 BFSS_APIDGetVersionArgs
  var _result2 BFSS_APIDGetVersionResult
  if err = p.Client_().Call(ctx, "GetVersion", &_args1, &_result2); err != nil {
    return
  }
  return _result2.GetSuccess(), nil
}

// Parameters:
//  - Oid
//  - Size
//  - Flag
//  - Tag
func (p *BFSS_APIDClient) CreateObject(ctx context.Context, oid string, size int32, flag int32, tag string) (r bfss.BFSS_RESULT, err error) {
  var _args3 BFSS_APIDCreateObjectArgs
  _args3.Oid = oid
  _args3.Size = size
  _args3.Flag = flag
  _args3.Tag = tag
  var _result4 BFSS_APIDCreateObjectResult
  if err = p.Client_().Call(ctx, "CreateObject", &_args3, &_result4); err != nil {
    return
  }
  return _result4.GetSuccess(), nil
}

// Parameters:
//  - Oid
func (p *BFSS_APIDClient) DeleteObject(ctx context.Context, oid string) (r bfss.BFSS_RESULT, err error) {
  var _args5 BFSS_APIDDeleteObjectArgs
  _args5.Oid = oid
  var _result6 BFSS_APIDDeleteObjectResult
  if err = p.Client_().Call(ctx, "DeleteObject", &_args5, &_result6); err != nil {
    return
  }
  return _result6.GetSuccess(), nil
}

// Parameters:
//  - Oid
//  - Offset
//  - Data
func (p *BFSS_APIDClient) Write(ctx context.Context, oid string, offset int32, data []byte) (r bfss.BFSS_RESULT, err error) {
  var _args7 BFSS_APIDWriteArgs
  _args7.Oid = oid
  _args7.Offset = offset
  _args7.Data = data
  var _result8 BFSS_APIDWriteResult
  if err = p.Client_().Call(ctx, "Write", &_args7, &_result8); err != nil {
    return
  }
  return _result8.GetSuccess(), nil
}

// Parameters:
//  - Oid
//  - Newsize_
func (p *BFSS_APIDClient) ResizeObject(ctx context.Context, oid string, newsize int32) (r bfss.BFSS_RESULT, err error) {
  var _args9 BFSS_APIDResizeObjectArgs
  _args9.Oid = oid
  _args9.Newsize_ = newsize
  var _result10 BFSS_APIDResizeObjectResult
  if err = p.Client_().Call(ctx, "ResizeObject", &_args9, &_result10); err != nil {
    return
  }
  return _result10.GetSuccess(), nil
}

// Parameters:
//  - Oid
func (p *BFSS_APIDClient) CompleteObject(ctx context.Context, oid string) (r bfss.BFSS_RESULT, err error) {
  var _args11 BFSS_APIDCompleteObjectArgs
  _args11.Oid = oid
  var _result12 BFSS_APIDCompleteObjectResult
  if err = p.Client_().Call(ctx, "CompleteObject", &_args11, &_result12); err != nil {
    return
  }
  return _result12.GetSuccess(), nil
}

// Parameters:
//  - Oid
func (p *BFSS_APIDClient) GetObjectInfo(ctx context.Context, oid string) (r *OBJECT_INFO_RESULT, err error) {
  var _args13 BFSS_APIDGetObjectInfoArgs
  _args13.Oid = oid
  var _result14 BFSS_APIDGetObjectInfoResult
  if err = p.Client_().Call(ctx, "GetObjectInfo", &_args13, &_result14); err != nil {
    return
  }
  return _result14.GetSuccess(), nil
}

// Parameters:
//  - Hash
//  - Size
//  - Head
func (p *BFSS_APIDClient) ObjectLockHasHash(ctx context.Context, hash string, size int32, head []byte) (r bfss.BFSS_RESULT, err error) {
  var _args15 BFSS_APIDObjectLockHasHashArgs
  _args15.Hash = hash
  _args15.Size = size
  _args15.Head = head
  var _result16 BFSS_APIDObjectLockHasHashResult
  if err = p.Client_().Call(ctx, "ObjectLockHasHash", &_args15, &_result16); err != nil {
    return
  }
  return _result16.GetSuccess(), nil
}

// Parameters:
//  - Oid
//  - Hash
//  - Size
//  - Head
//  - Flag
//  - Tag
func (p *BFSS_APIDClient) CreateObjectLink(ctx context.Context, oid string, hash string, size int32, head []byte, flag int32, tag string) (r bfss.BFSS_RESULT, err error) {
  var _args17 BFSS_APIDCreateObjectLinkArgs
  _args17.Oid = oid
  _args17.Hash = hash
  _args17.Size = size
  _args17.Head = head
  _args17.Flag = flag
  _args17.Tag = tag
  var _result18 BFSS_APIDCreateObjectLinkResult
  if err = p.Client_().Call(ctx, "CreateObjectLink", &_args17, &_result18); err != nil {
    return
  }
  return _result18.GetSuccess(), nil
}

// Parameters:
//  - Oid
//  - Size
//  - Offset
func (p *BFSS_APIDClient) Read(ctx context.Context, oid string, size int32, offset int32) (r *READ_RESULT, err error) {
  var _args19 BFSS_APIDReadArgs
  _args19.Oid = oid
  _args19.Size = size
  _args19.Offset = offset
  var _result20 BFSS_APIDReadResult
  if err = p.Client_().Call(ctx, "Read", &_args19, &_result20); err != nil {
    return
  }
  return _result20.GetSuccess(), nil
}

// Parameters:
//  - Oid
//  - Size
//  - Offset
func (p *BFSS_APIDClient) ReadBlk(ctx context.Context, oid string, size int32, offset int32) (r *READ_RESULT, err error) {
  var _args21 BFSS_APIDReadBlkArgs
  _args21.Oid = oid
  _args21.Size = size
  _args21.Offset = offset
  var _result22 BFSS_APIDReadBlkResult
  if err = p.Client_().Call(ctx, "ReadBlk", &_args21, &_result22); err != nil {
    return
  }
  return _result22.GetSuccess(), nil
}

// Parameters:
//  - Oid
func (p *BFSS_APIDClient) GetObjectBlksInfo(ctx context.Context, oid string) (r *OBJECT_BLKS_RESULT, err error) {
  var _args23 BFSS_APIDGetObjectBlksInfoArgs
  _args23.Oid = oid
  var _result24 BFSS_APIDGetObjectBlksInfoResult
  if err = p.Client_().Call(ctx, "GetObjectBlksInfo", &_args23, &_result24); err != nil {
    return
  }
  return _result24.GetSuccess(), nil
}

// Parameters:
//  - Oid
//  - Offset
func (p *BFSS_APIDClient) GetObjectBlkKey(ctx context.Context, oid string, offset int32) (r *BLK_KEY_RESULT, err error) {
  var _args25 BFSS_APIDGetObjectBlkKeyArgs
  _args25.Oid = oid
  _args25.Offset = offset
  var _result26 BFSS_APIDGetObjectBlkKeyResult
  if err = p.Client_().Call(ctx, "GetObjectBlkKey", &_args25, &_result26); err != nil {
    return
  }
  return _result26.GetSuccess(), nil
}

// Parameters:
//  - CmdId
//  - Param
//  - Data
func (p *BFSS_APIDClient) ManageMessage(ctx context.Context, CmdId int32, Param int32, Data []byte) (r *MESSAGE_RESULT, err error) {
  var _args27 BFSS_APIDManageMessageArgs
  _args27.CmdId = CmdId
  _args27.Param = Param
  _args27.Data = Data
  var _result28 BFSS_APIDManageMessageResult
  if err = p.Client_().Call(ctx, "ManageMessage", &_args27, &_result28); err != nil {
    return
  }
  return _result28.GetSuccess(), nil
}

type BFSS_APIDProcessor struct {
  processorMap map[string]thrift.TProcessorFunction
  handler BFSS_APID
}

func (p *BFSS_APIDProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *BFSS_APIDProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
  processor, ok = p.processorMap[key]
  return processor, ok
}

func (p *BFSS_APIDProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewBFSS_APIDProcessor(handler BFSS_APID) *BFSS_APIDProcessor {

  self29 := &BFSS_APIDProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
  self29.processorMap["GetVersion"] = &bFSS_APIDProcessorGetVersion{handler:handler}
  self29.processorMap["CreateObject"] = &bFSS_APIDProcessorCreateObject{handler:handler}
  self29.processorMap["DeleteObject"] = &bFSS_APIDProcessorDeleteObject{handler:handler}
  self29.processorMap["Write"] = &bFSS_APIDProcessorWrite{handler:handler}
  self29.processorMap["ResizeObject"] = &bFSS_APIDProcessorResizeObject{handler:handler}
  self29.processorMap["CompleteObject"] = &bFSS_APIDProcessorCompleteObject{handler:handler}
  self29.processorMap["GetObjectInfo"] = &bFSS_APIDProcessorGetObjectInfo{handler:handler}
  self29.processorMap["ObjectLockHasHash"] = &bFSS_APIDProcessorObjectLockHasHash{handler:handler}
  self29.processorMap["CreateObjectLink"] = &bFSS_APIDProcessorCreateObjectLink{handler:handler}
  self29.processorMap["Read"] = &bFSS_APIDProcessorRead{handler:handler}
  self29.processorMap["ReadBlk"] = &bFSS_APIDProcessorReadBlk{handler:handler}
  self29.processorMap["GetObjectBlksInfo"] = &bFSS_APIDProcessorGetObjectBlksInfo{handler:handler}
  self29.processorMap["GetObjectBlkKey"] = &bFSS_APIDProcessorGetObjectBlkKey{handler:handler}
  self29.processorMap["ManageMessage"] = &bFSS_APIDProcessorManageMessage{handler:handler}
return self29
}

func (p *BFSS_APIDProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err := iprot.ReadMessageBegin()
  if err != nil { return false, err }
  if processor, ok := p.GetProcessorFunction(name); ok {
    return processor.Process(ctx, seqId, iprot, oprot)
  }
  iprot.Skip(thrift.STRUCT)
  iprot.ReadMessageEnd()
  x30 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
  oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
  x30.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Flush(ctx)
  return false, x30

}

type bFSS_APIDProcessorGetVersion struct {
  handler BFSS_APID
}

func (p *bFSS_APIDProcessorGetVersion) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := BFSS_APIDGetVersionArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("GetVersion", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := BFSS_APIDGetVersionResult{}
var retval string
  var err2 error
  if retval, err2 = p.handler.GetVersion(ctx); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetVersion: " + err2.Error())
    oprot.WriteMessageBegin("GetVersion", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("GetVersion", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type bFSS_APIDProcessorCreateObject struct {
  handler BFSS_APID
}

func (p *bFSS_APIDProcessorCreateObject) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := BFSS_APIDCreateObjectArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("CreateObject", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := BFSS_APIDCreateObjectResult{}
var retval bfss.BFSS_RESULT
  var err2 error
  if retval, err2 = p.handler.CreateObject(ctx, args.Oid, args.Size, args.Flag, args.Tag); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing CreateObject: " + err2.Error())
    oprot.WriteMessageBegin("CreateObject", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("CreateObject", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type bFSS_APIDProcessorDeleteObject struct {
  handler BFSS_APID
}

func (p *bFSS_APIDProcessorDeleteObject) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := BFSS_APIDDeleteObjectArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("DeleteObject", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := BFSS_APIDDeleteObjectResult{}
var retval bfss.BFSS_RESULT
  var err2 error
  if retval, err2 = p.handler.DeleteObject(ctx, args.Oid); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing DeleteObject: " + err2.Error())
    oprot.WriteMessageBegin("DeleteObject", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("DeleteObject", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type bFSS_APIDProcessorWrite struct {
  handler BFSS_APID
}

func (p *bFSS_APIDProcessorWrite) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := BFSS_APIDWriteArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("Write", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := BFSS_APIDWriteResult{}
var retval bfss.BFSS_RESULT
  var err2 error
  if retval, err2 = p.handler.Write(ctx, args.Oid, args.Offset, args.Data); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing Write: " + err2.Error())
    oprot.WriteMessageBegin("Write", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("Write", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type bFSS_APIDProcessorResizeObject struct {
  handler BFSS_APID
}

func (p *bFSS_APIDProcessorResizeObject) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := BFSS_APIDResizeObjectArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("ResizeObject", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := BFSS_APIDResizeObjectResult{}
var retval bfss.BFSS_RESULT
  var err2 error
  if retval, err2 = p.handler.ResizeObject(ctx, args.Oid, args.Newsize_); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing ResizeObject: " + err2.Error())
    oprot.WriteMessageBegin("ResizeObject", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("ResizeObject", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type bFSS_APIDProcessorCompleteObject struct {
  handler BFSS_APID
}

func (p *bFSS_APIDProcessorCompleteObject) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := BFSS_APIDCompleteObjectArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("CompleteObject", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := BFSS_APIDCompleteObjectResult{}
var retval bfss.BFSS_RESULT
  var err2 error
  if retval, err2 = p.handler.CompleteObject(ctx, args.Oid); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing CompleteObject: " + err2.Error())
    oprot.WriteMessageBegin("CompleteObject", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("CompleteObject", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type bFSS_APIDProcessorGetObjectInfo struct {
  handler BFSS_APID
}

func (p *bFSS_APIDProcessorGetObjectInfo) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := BFSS_APIDGetObjectInfoArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("GetObjectInfo", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := BFSS_APIDGetObjectInfoResult{}
var retval *OBJECT_INFO_RESULT
  var err2 error
  if retval, err2 = p.handler.GetObjectInfo(ctx, args.Oid); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetObjectInfo: " + err2.Error())
    oprot.WriteMessageBegin("GetObjectInfo", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("GetObjectInfo", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type bFSS_APIDProcessorObjectLockHasHash struct {
  handler BFSS_APID
}

func (p *bFSS_APIDProcessorObjectLockHasHash) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := BFSS_APIDObjectLockHasHashArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("ObjectLockHasHash", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := BFSS_APIDObjectLockHasHashResult{}
var retval bfss.BFSS_RESULT
  var err2 error
  if retval, err2 = p.handler.ObjectLockHasHash(ctx, args.Hash, args.Size, args.Head); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing ObjectLockHasHash: " + err2.Error())
    oprot.WriteMessageBegin("ObjectLockHasHash", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("ObjectLockHasHash", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type bFSS_APIDProcessorCreateObjectLink struct {
  handler BFSS_APID
}

func (p *bFSS_APIDProcessorCreateObjectLink) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := BFSS_APIDCreateObjectLinkArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("CreateObjectLink", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := BFSS_APIDCreateObjectLinkResult{}
var retval bfss.BFSS_RESULT
  var err2 error
  if retval, err2 = p.handler.CreateObjectLink(ctx, args.Oid, args.Hash, args.Size, args.Head, args.Flag, args.Tag); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing CreateObjectLink: " + err2.Error())
    oprot.WriteMessageBegin("CreateObjectLink", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("CreateObjectLink", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type bFSS_APIDProcessorRead struct {
  handler BFSS_APID
}

func (p *bFSS_APIDProcessorRead) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := BFSS_APIDReadArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("Read", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := BFSS_APIDReadResult{}
var retval *READ_RESULT
  var err2 error
  if retval, err2 = p.handler.Read(ctx, args.Oid, args.Size, args.Offset); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing Read: " + err2.Error())
    oprot.WriteMessageBegin("Read", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("Read", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type bFSS_APIDProcessorReadBlk struct {
  handler BFSS_APID
}

func (p *bFSS_APIDProcessorReadBlk) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := BFSS_APIDReadBlkArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("ReadBlk", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := BFSS_APIDReadBlkResult{}
var retval *READ_RESULT
  var err2 error
  if retval, err2 = p.handler.ReadBlk(ctx, args.Oid, args.Size, args.Offset); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing ReadBlk: " + err2.Error())
    oprot.WriteMessageBegin("ReadBlk", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("ReadBlk", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type bFSS_APIDProcessorGetObjectBlksInfo struct {
  handler BFSS_APID
}

func (p *bFSS_APIDProcessorGetObjectBlksInfo) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := BFSS_APIDGetObjectBlksInfoArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("GetObjectBlksInfo", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := BFSS_APIDGetObjectBlksInfoResult{}
var retval *OBJECT_BLKS_RESULT
  var err2 error
  if retval, err2 = p.handler.GetObjectBlksInfo(ctx, args.Oid); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetObjectBlksInfo: " + err2.Error())
    oprot.WriteMessageBegin("GetObjectBlksInfo", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("GetObjectBlksInfo", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type bFSS_APIDProcessorGetObjectBlkKey struct {
  handler BFSS_APID
}

func (p *bFSS_APIDProcessorGetObjectBlkKey) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := BFSS_APIDGetObjectBlkKeyArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("GetObjectBlkKey", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := BFSS_APIDGetObjectBlkKeyResult{}
var retval *BLK_KEY_RESULT
  var err2 error
  if retval, err2 = p.handler.GetObjectBlkKey(ctx, args.Oid, args.Offset); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetObjectBlkKey: " + err2.Error())
    oprot.WriteMessageBegin("GetObjectBlkKey", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("GetObjectBlkKey", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type bFSS_APIDProcessorManageMessage struct {
  handler BFSS_APID
}

func (p *bFSS_APIDProcessorManageMessage) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := BFSS_APIDManageMessageArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("ManageMessage", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := BFSS_APIDManageMessageResult{}
var retval *MESSAGE_RESULT
  var err2 error
  if retval, err2 = p.handler.ManageMessage(ctx, args.CmdId, args.Param, args.Data); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing ManageMessage: " + err2.Error())
    oprot.WriteMessageBegin("ManageMessage", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("ManageMessage", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

type BFSS_APIDGetVersionArgs struct {
}

func NewBFSS_APIDGetVersionArgs() *BFSS_APIDGetVersionArgs {
  return &BFSS_APIDGetVersionArgs{}
}

func (p *BFSS_APIDGetVersionArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BFSS_APIDGetVersionArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("GetVersion_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BFSS_APIDGetVersionArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BFSS_APIDGetVersionArgs(%+v)", *p)
}

// Attributes:
//  - Success
type BFSS_APIDGetVersionResult struct {
  Success *string `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewBFSS_APIDGetVersionResult() *BFSS_APIDGetVersionResult {
  return &BFSS_APIDGetVersionResult{}
}

var BFSS_APIDGetVersionResult_Success_DEFAULT string
func (p *BFSS_APIDGetVersionResult) GetSuccess() string {
  if !p.IsSetSuccess() {
    return BFSS_APIDGetVersionResult_Success_DEFAULT
  }
return *p.Success
}
func (p *BFSS_APIDGetVersionResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *BFSS_APIDGetVersionResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BFSS_APIDGetVersionResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *BFSS_APIDGetVersionResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("GetVersion_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BFSS_APIDGetVersionResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteString(string(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *BFSS_APIDGetVersionResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BFSS_APIDGetVersionResult(%+v)", *p)
}

// Attributes:
//  - Oid
//  - Size
//  - Flag
//  - Tag
type BFSS_APIDCreateObjectArgs struct {
  Oid string `thrift:"oid,1" db:"oid" json:"oid"`
  Size int32 `thrift:"size,2" db:"size" json:"size"`
  Flag int32 `thrift:"flag,3" db:"flag" json:"flag"`
  Tag string `thrift:"tag,4" db:"tag" json:"tag"`
}

func NewBFSS_APIDCreateObjectArgs() *BFSS_APIDCreateObjectArgs {
  return &BFSS_APIDCreateObjectArgs{}
}


func (p *BFSS_APIDCreateObjectArgs) GetOid() string {
  return p.Oid
}

func (p *BFSS_APIDCreateObjectArgs) GetSize() int32 {
  return p.Size
}

func (p *BFSS_APIDCreateObjectArgs) GetFlag() int32 {
  return p.Flag
}

func (p *BFSS_APIDCreateObjectArgs) GetTag() string {
  return p.Tag
}
func (p *BFSS_APIDCreateObjectArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BFSS_APIDCreateObjectArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Oid = v
}
  return nil
}

func (p *BFSS_APIDCreateObjectArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Size = v
}
  return nil
}

func (p *BFSS_APIDCreateObjectArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Flag = v
}
  return nil
}

func (p *BFSS_APIDCreateObjectArgs)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Tag = v
}
  return nil
}

func (p *BFSS_APIDCreateObjectArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("CreateObject_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BFSS_APIDCreateObjectArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("oid", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:oid: ", p), err) }
  if err := oprot.WriteString(string(p.Oid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.oid (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:oid: ", p), err) }
  return err
}

func (p *BFSS_APIDCreateObjectArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("size", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:size: ", p), err) }
  if err := oprot.WriteI32(int32(p.Size)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.size (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:size: ", p), err) }
  return err
}

func (p *BFSS_APIDCreateObjectArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("flag", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:flag: ", p), err) }
  if err := oprot.WriteI32(int32(p.Flag)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.flag (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:flag: ", p), err) }
  return err
}

func (p *BFSS_APIDCreateObjectArgs) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("tag", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:tag: ", p), err) }
  if err := oprot.WriteString(string(p.Tag)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.tag (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:tag: ", p), err) }
  return err
}

func (p *BFSS_APIDCreateObjectArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BFSS_APIDCreateObjectArgs(%+v)", *p)
}

// Attributes:
//  - Success
type BFSS_APIDCreateObjectResult struct {
  Success *bfss.BFSS_RESULT `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewBFSS_APIDCreateObjectResult() *BFSS_APIDCreateObjectResult {
  return &BFSS_APIDCreateObjectResult{}
}

var BFSS_APIDCreateObjectResult_Success_DEFAULT bfss.BFSS_RESULT
func (p *BFSS_APIDCreateObjectResult) GetSuccess() bfss.BFSS_RESULT {
  if !p.IsSetSuccess() {
    return BFSS_APIDCreateObjectResult_Success_DEFAULT
  }
return *p.Success
}
func (p *BFSS_APIDCreateObjectResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *BFSS_APIDCreateObjectResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BFSS_APIDCreateObjectResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  temp := bfss.BFSS_RESULT(v)
  p.Success = &temp
}
  return nil
}

func (p *BFSS_APIDCreateObjectResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("CreateObject_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BFSS_APIDCreateObjectResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.I32, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteI32(int32(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *BFSS_APIDCreateObjectResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BFSS_APIDCreateObjectResult(%+v)", *p)
}

// Attributes:
//  - Oid
type BFSS_APIDDeleteObjectArgs struct {
  Oid string `thrift:"oid,1" db:"oid" json:"oid"`
}

func NewBFSS_APIDDeleteObjectArgs() *BFSS_APIDDeleteObjectArgs {
  return &BFSS_APIDDeleteObjectArgs{}
}


func (p *BFSS_APIDDeleteObjectArgs) GetOid() string {
  return p.Oid
}
func (p *BFSS_APIDDeleteObjectArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BFSS_APIDDeleteObjectArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Oid = v
}
  return nil
}

func (p *BFSS_APIDDeleteObjectArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("DeleteObject_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BFSS_APIDDeleteObjectArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("oid", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:oid: ", p), err) }
  if err := oprot.WriteString(string(p.Oid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.oid (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:oid: ", p), err) }
  return err
}

func (p *BFSS_APIDDeleteObjectArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BFSS_APIDDeleteObjectArgs(%+v)", *p)
}

// Attributes:
//  - Success
type BFSS_APIDDeleteObjectResult struct {
  Success *bfss.BFSS_RESULT `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewBFSS_APIDDeleteObjectResult() *BFSS_APIDDeleteObjectResult {
  return &BFSS_APIDDeleteObjectResult{}
}

var BFSS_APIDDeleteObjectResult_Success_DEFAULT bfss.BFSS_RESULT
func (p *BFSS_APIDDeleteObjectResult) GetSuccess() bfss.BFSS_RESULT {
  if !p.IsSetSuccess() {
    return BFSS_APIDDeleteObjectResult_Success_DEFAULT
  }
return *p.Success
}
func (p *BFSS_APIDDeleteObjectResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *BFSS_APIDDeleteObjectResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BFSS_APIDDeleteObjectResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  temp := bfss.BFSS_RESULT(v)
  p.Success = &temp
}
  return nil
}

func (p *BFSS_APIDDeleteObjectResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("DeleteObject_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BFSS_APIDDeleteObjectResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.I32, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteI32(int32(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *BFSS_APIDDeleteObjectResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BFSS_APIDDeleteObjectResult(%+v)", *p)
}

// Attributes:
//  - Oid
//  - Offset
//  - Data
type BFSS_APIDWriteArgs struct {
  Oid string `thrift:"oid,1" db:"oid" json:"oid"`
  Offset int32 `thrift:"offset,2" db:"offset" json:"offset"`
  Data []byte `thrift:"data,3" db:"data" json:"data"`
}

func NewBFSS_APIDWriteArgs() *BFSS_APIDWriteArgs {
  return &BFSS_APIDWriteArgs{}
}


func (p *BFSS_APIDWriteArgs) GetOid() string {
  return p.Oid
}

func (p *BFSS_APIDWriteArgs) GetOffset() int32 {
  return p.Offset
}

func (p *BFSS_APIDWriteArgs) GetData() []byte {
  return p.Data
}
func (p *BFSS_APIDWriteArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BFSS_APIDWriteArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Oid = v
}
  return nil
}

func (p *BFSS_APIDWriteArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Offset = v
}
  return nil
}

func (p *BFSS_APIDWriteArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Data = v
}
  return nil
}

func (p *BFSS_APIDWriteArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("Write_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BFSS_APIDWriteArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("oid", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:oid: ", p), err) }
  if err := oprot.WriteString(string(p.Oid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.oid (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:oid: ", p), err) }
  return err
}

func (p *BFSS_APIDWriteArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("offset", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:offset: ", p), err) }
  if err := oprot.WriteI32(int32(p.Offset)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.offset (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:offset: ", p), err) }
  return err
}

func (p *BFSS_APIDWriteArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("data", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:data: ", p), err) }
  if err := oprot.WriteBinary(p.Data); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.data (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:data: ", p), err) }
  return err
}

func (p *BFSS_APIDWriteArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BFSS_APIDWriteArgs(%+v)", *p)
}

// Attributes:
//  - Success
type BFSS_APIDWriteResult struct {
  Success *bfss.BFSS_RESULT `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewBFSS_APIDWriteResult() *BFSS_APIDWriteResult {
  return &BFSS_APIDWriteResult{}
}

var BFSS_APIDWriteResult_Success_DEFAULT bfss.BFSS_RESULT
func (p *BFSS_APIDWriteResult) GetSuccess() bfss.BFSS_RESULT {
  if !p.IsSetSuccess() {
    return BFSS_APIDWriteResult_Success_DEFAULT
  }
return *p.Success
}
func (p *BFSS_APIDWriteResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *BFSS_APIDWriteResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BFSS_APIDWriteResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  temp := bfss.BFSS_RESULT(v)
  p.Success = &temp
}
  return nil
}

func (p *BFSS_APIDWriteResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("Write_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BFSS_APIDWriteResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.I32, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteI32(int32(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *BFSS_APIDWriteResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BFSS_APIDWriteResult(%+v)", *p)
}

// Attributes:
//  - Oid
//  - Newsize_
type BFSS_APIDResizeObjectArgs struct {
  Oid string `thrift:"oid,1" db:"oid" json:"oid"`
  Newsize_ int32 `thrift:"newsize,2" db:"newsize" json:"newsize"`
}

func NewBFSS_APIDResizeObjectArgs() *BFSS_APIDResizeObjectArgs {
  return &BFSS_APIDResizeObjectArgs{}
}


func (p *BFSS_APIDResizeObjectArgs) GetOid() string {
  return p.Oid
}

func (p *BFSS_APIDResizeObjectArgs) GetNewsize_() int32 {
  return p.Newsize_
}
func (p *BFSS_APIDResizeObjectArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BFSS_APIDResizeObjectArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Oid = v
}
  return nil
}

func (p *BFSS_APIDResizeObjectArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Newsize_ = v
}
  return nil
}

func (p *BFSS_APIDResizeObjectArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ResizeObject_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BFSS_APIDResizeObjectArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("oid", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:oid: ", p), err) }
  if err := oprot.WriteString(string(p.Oid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.oid (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:oid: ", p), err) }
  return err
}

func (p *BFSS_APIDResizeObjectArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("newsize", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:newsize: ", p), err) }
  if err := oprot.WriteI32(int32(p.Newsize_)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.newsize (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:newsize: ", p), err) }
  return err
}

func (p *BFSS_APIDResizeObjectArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BFSS_APIDResizeObjectArgs(%+v)", *p)
}

// Attributes:
//  - Success
type BFSS_APIDResizeObjectResult struct {
  Success *bfss.BFSS_RESULT `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewBFSS_APIDResizeObjectResult() *BFSS_APIDResizeObjectResult {
  return &BFSS_APIDResizeObjectResult{}
}

var BFSS_APIDResizeObjectResult_Success_DEFAULT bfss.BFSS_RESULT
func (p *BFSS_APIDResizeObjectResult) GetSuccess() bfss.BFSS_RESULT {
  if !p.IsSetSuccess() {
    return BFSS_APIDResizeObjectResult_Success_DEFAULT
  }
return *p.Success
}
func (p *BFSS_APIDResizeObjectResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *BFSS_APIDResizeObjectResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BFSS_APIDResizeObjectResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  temp := bfss.BFSS_RESULT(v)
  p.Success = &temp
}
  return nil
}

func (p *BFSS_APIDResizeObjectResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ResizeObject_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BFSS_APIDResizeObjectResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.I32, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteI32(int32(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *BFSS_APIDResizeObjectResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BFSS_APIDResizeObjectResult(%+v)", *p)
}

// Attributes:
//  - Oid
type BFSS_APIDCompleteObjectArgs struct {
  Oid string `thrift:"oid,1" db:"oid" json:"oid"`
}

func NewBFSS_APIDCompleteObjectArgs() *BFSS_APIDCompleteObjectArgs {
  return &BFSS_APIDCompleteObjectArgs{}
}


func (p *BFSS_APIDCompleteObjectArgs) GetOid() string {
  return p.Oid
}
func (p *BFSS_APIDCompleteObjectArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BFSS_APIDCompleteObjectArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Oid = v
}
  return nil
}

func (p *BFSS_APIDCompleteObjectArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("CompleteObject_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BFSS_APIDCompleteObjectArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("oid", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:oid: ", p), err) }
  if err := oprot.WriteString(string(p.Oid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.oid (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:oid: ", p), err) }
  return err
}

func (p *BFSS_APIDCompleteObjectArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BFSS_APIDCompleteObjectArgs(%+v)", *p)
}

// Attributes:
//  - Success
type BFSS_APIDCompleteObjectResult struct {
  Success *bfss.BFSS_RESULT `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewBFSS_APIDCompleteObjectResult() *BFSS_APIDCompleteObjectResult {
  return &BFSS_APIDCompleteObjectResult{}
}

var BFSS_APIDCompleteObjectResult_Success_DEFAULT bfss.BFSS_RESULT
func (p *BFSS_APIDCompleteObjectResult) GetSuccess() bfss.BFSS_RESULT {
  if !p.IsSetSuccess() {
    return BFSS_APIDCompleteObjectResult_Success_DEFAULT
  }
return *p.Success
}
func (p *BFSS_APIDCompleteObjectResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *BFSS_APIDCompleteObjectResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BFSS_APIDCompleteObjectResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  temp := bfss.BFSS_RESULT(v)
  p.Success = &temp
}
  return nil
}

func (p *BFSS_APIDCompleteObjectResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("CompleteObject_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BFSS_APIDCompleteObjectResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.I32, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteI32(int32(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *BFSS_APIDCompleteObjectResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BFSS_APIDCompleteObjectResult(%+v)", *p)
}

// Attributes:
//  - Oid
type BFSS_APIDGetObjectInfoArgs struct {
  Oid string `thrift:"oid,1" db:"oid" json:"oid"`
}

func NewBFSS_APIDGetObjectInfoArgs() *BFSS_APIDGetObjectInfoArgs {
  return &BFSS_APIDGetObjectInfoArgs{}
}


func (p *BFSS_APIDGetObjectInfoArgs) GetOid() string {
  return p.Oid
}
func (p *BFSS_APIDGetObjectInfoArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BFSS_APIDGetObjectInfoArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Oid = v
}
  return nil
}

func (p *BFSS_APIDGetObjectInfoArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("GetObjectInfo_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BFSS_APIDGetObjectInfoArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("oid", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:oid: ", p), err) }
  if err := oprot.WriteString(string(p.Oid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.oid (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:oid: ", p), err) }
  return err
}

func (p *BFSS_APIDGetObjectInfoArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BFSS_APIDGetObjectInfoArgs(%+v)", *p)
}

// Attributes:
//  - Success
type BFSS_APIDGetObjectInfoResult struct {
  Success *OBJECT_INFO_RESULT `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewBFSS_APIDGetObjectInfoResult() *BFSS_APIDGetObjectInfoResult {
  return &BFSS_APIDGetObjectInfoResult{}
}

var BFSS_APIDGetObjectInfoResult_Success_DEFAULT *OBJECT_INFO_RESULT
func (p *BFSS_APIDGetObjectInfoResult) GetSuccess() *OBJECT_INFO_RESULT {
  if !p.IsSetSuccess() {
    return BFSS_APIDGetObjectInfoResult_Success_DEFAULT
  }
return p.Success
}
func (p *BFSS_APIDGetObjectInfoResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *BFSS_APIDGetObjectInfoResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BFSS_APIDGetObjectInfoResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &OBJECT_INFO_RESULT{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *BFSS_APIDGetObjectInfoResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("GetObjectInfo_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BFSS_APIDGetObjectInfoResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *BFSS_APIDGetObjectInfoResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BFSS_APIDGetObjectInfoResult(%+v)", *p)
}

// Attributes:
//  - Hash
//  - Size
//  - Head
type BFSS_APIDObjectLockHasHashArgs struct {
  Hash string `thrift:"hash,1" db:"hash" json:"hash"`
  Size int32 `thrift:"size,2" db:"size" json:"size"`
  Head []byte `thrift:"head,3" db:"head" json:"head"`
}

func NewBFSS_APIDObjectLockHasHashArgs() *BFSS_APIDObjectLockHasHashArgs {
  return &BFSS_APIDObjectLockHasHashArgs{}
}


func (p *BFSS_APIDObjectLockHasHashArgs) GetHash() string {
  return p.Hash
}

func (p *BFSS_APIDObjectLockHasHashArgs) GetSize() int32 {
  return p.Size
}

func (p *BFSS_APIDObjectLockHasHashArgs) GetHead() []byte {
  return p.Head
}
func (p *BFSS_APIDObjectLockHasHashArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BFSS_APIDObjectLockHasHashArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Hash = v
}
  return nil
}

func (p *BFSS_APIDObjectLockHasHashArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Size = v
}
  return nil
}

func (p *BFSS_APIDObjectLockHasHashArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Head = v
}
  return nil
}

func (p *BFSS_APIDObjectLockHasHashArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ObjectLockHasHash_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BFSS_APIDObjectLockHasHashArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("hash", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:hash: ", p), err) }
  if err := oprot.WriteString(string(p.Hash)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.hash (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:hash: ", p), err) }
  return err
}

func (p *BFSS_APIDObjectLockHasHashArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("size", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:size: ", p), err) }
  if err := oprot.WriteI32(int32(p.Size)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.size (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:size: ", p), err) }
  return err
}

func (p *BFSS_APIDObjectLockHasHashArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("head", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:head: ", p), err) }
  if err := oprot.WriteBinary(p.Head); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.head (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:head: ", p), err) }
  return err
}

func (p *BFSS_APIDObjectLockHasHashArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BFSS_APIDObjectLockHasHashArgs(%+v)", *p)
}

// Attributes:
//  - Success
type BFSS_APIDObjectLockHasHashResult struct {
  Success *bfss.BFSS_RESULT `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewBFSS_APIDObjectLockHasHashResult() *BFSS_APIDObjectLockHasHashResult {
  return &BFSS_APIDObjectLockHasHashResult{}
}

var BFSS_APIDObjectLockHasHashResult_Success_DEFAULT bfss.BFSS_RESULT
func (p *BFSS_APIDObjectLockHasHashResult) GetSuccess() bfss.BFSS_RESULT {
  if !p.IsSetSuccess() {
    return BFSS_APIDObjectLockHasHashResult_Success_DEFAULT
  }
return *p.Success
}
func (p *BFSS_APIDObjectLockHasHashResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *BFSS_APIDObjectLockHasHashResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BFSS_APIDObjectLockHasHashResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  temp := bfss.BFSS_RESULT(v)
  p.Success = &temp
}
  return nil
}

func (p *BFSS_APIDObjectLockHasHashResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ObjectLockHasHash_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BFSS_APIDObjectLockHasHashResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.I32, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteI32(int32(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *BFSS_APIDObjectLockHasHashResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BFSS_APIDObjectLockHasHashResult(%+v)", *p)
}

// Attributes:
//  - Oid
//  - Hash
//  - Size
//  - Head
//  - Flag
//  - Tag
type BFSS_APIDCreateObjectLinkArgs struct {
  Oid string `thrift:"oid,1" db:"oid" json:"oid"`
  Hash string `thrift:"hash,2" db:"hash" json:"hash"`
  Size int32 `thrift:"size,3" db:"size" json:"size"`
  Head []byte `thrift:"head,4" db:"head" json:"head"`
  Flag int32 `thrift:"flag,5" db:"flag" json:"flag"`
  Tag string `thrift:"tag,6" db:"tag" json:"tag"`
}

func NewBFSS_APIDCreateObjectLinkArgs() *BFSS_APIDCreateObjectLinkArgs {
  return &BFSS_APIDCreateObjectLinkArgs{}
}


func (p *BFSS_APIDCreateObjectLinkArgs) GetOid() string {
  return p.Oid
}

func (p *BFSS_APIDCreateObjectLinkArgs) GetHash() string {
  return p.Hash
}

func (p *BFSS_APIDCreateObjectLinkArgs) GetSize() int32 {
  return p.Size
}

func (p *BFSS_APIDCreateObjectLinkArgs) GetHead() []byte {
  return p.Head
}

func (p *BFSS_APIDCreateObjectLinkArgs) GetFlag() int32 {
  return p.Flag
}

func (p *BFSS_APIDCreateObjectLinkArgs) GetTag() string {
  return p.Tag
}
func (p *BFSS_APIDCreateObjectLinkArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BFSS_APIDCreateObjectLinkArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Oid = v
}
  return nil
}

func (p *BFSS_APIDCreateObjectLinkArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Hash = v
}
  return nil
}

func (p *BFSS_APIDCreateObjectLinkArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Size = v
}
  return nil
}

func (p *BFSS_APIDCreateObjectLinkArgs)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Head = v
}
  return nil
}

func (p *BFSS_APIDCreateObjectLinkArgs)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.Flag = v
}
  return nil
}

func (p *BFSS_APIDCreateObjectLinkArgs)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.Tag = v
}
  return nil
}

func (p *BFSS_APIDCreateObjectLinkArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("CreateObjectLink_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BFSS_APIDCreateObjectLinkArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("oid", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:oid: ", p), err) }
  if err := oprot.WriteString(string(p.Oid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.oid (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:oid: ", p), err) }
  return err
}

func (p *BFSS_APIDCreateObjectLinkArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("hash", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:hash: ", p), err) }
  if err := oprot.WriteString(string(p.Hash)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.hash (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:hash: ", p), err) }
  return err
}

func (p *BFSS_APIDCreateObjectLinkArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("size", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:size: ", p), err) }
  if err := oprot.WriteI32(int32(p.Size)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.size (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:size: ", p), err) }
  return err
}

func (p *BFSS_APIDCreateObjectLinkArgs) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("head", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:head: ", p), err) }
  if err := oprot.WriteBinary(p.Head); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.head (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:head: ", p), err) }
  return err
}

func (p *BFSS_APIDCreateObjectLinkArgs) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("flag", thrift.I32, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:flag: ", p), err) }
  if err := oprot.WriteI32(int32(p.Flag)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.flag (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:flag: ", p), err) }
  return err
}

func (p *BFSS_APIDCreateObjectLinkArgs) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("tag", thrift.STRING, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:tag: ", p), err) }
  if err := oprot.WriteString(string(p.Tag)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.tag (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:tag: ", p), err) }
  return err
}

func (p *BFSS_APIDCreateObjectLinkArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BFSS_APIDCreateObjectLinkArgs(%+v)", *p)
}

// Attributes:
//  - Success
type BFSS_APIDCreateObjectLinkResult struct {
  Success *bfss.BFSS_RESULT `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewBFSS_APIDCreateObjectLinkResult() *BFSS_APIDCreateObjectLinkResult {
  return &BFSS_APIDCreateObjectLinkResult{}
}

var BFSS_APIDCreateObjectLinkResult_Success_DEFAULT bfss.BFSS_RESULT
func (p *BFSS_APIDCreateObjectLinkResult) GetSuccess() bfss.BFSS_RESULT {
  if !p.IsSetSuccess() {
    return BFSS_APIDCreateObjectLinkResult_Success_DEFAULT
  }
return *p.Success
}
func (p *BFSS_APIDCreateObjectLinkResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *BFSS_APIDCreateObjectLinkResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BFSS_APIDCreateObjectLinkResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  temp := bfss.BFSS_RESULT(v)
  p.Success = &temp
}
  return nil
}

func (p *BFSS_APIDCreateObjectLinkResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("CreateObjectLink_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BFSS_APIDCreateObjectLinkResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.I32, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteI32(int32(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *BFSS_APIDCreateObjectLinkResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BFSS_APIDCreateObjectLinkResult(%+v)", *p)
}

// Attributes:
//  - Oid
//  - Size
//  - Offset
type BFSS_APIDReadArgs struct {
  Oid string `thrift:"oid,1" db:"oid" json:"oid"`
  Size int32 `thrift:"size,2" db:"size" json:"size"`
  Offset int32 `thrift:"offset,3" db:"offset" json:"offset"`
}

func NewBFSS_APIDReadArgs() *BFSS_APIDReadArgs {
  return &BFSS_APIDReadArgs{}
}


func (p *BFSS_APIDReadArgs) GetOid() string {
  return p.Oid
}

func (p *BFSS_APIDReadArgs) GetSize() int32 {
  return p.Size
}

func (p *BFSS_APIDReadArgs) GetOffset() int32 {
  return p.Offset
}
func (p *BFSS_APIDReadArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BFSS_APIDReadArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Oid = v
}
  return nil
}

func (p *BFSS_APIDReadArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Size = v
}
  return nil
}

func (p *BFSS_APIDReadArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Offset = v
}
  return nil
}

func (p *BFSS_APIDReadArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("Read_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BFSS_APIDReadArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("oid", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:oid: ", p), err) }
  if err := oprot.WriteString(string(p.Oid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.oid (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:oid: ", p), err) }
  return err
}

func (p *BFSS_APIDReadArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("size", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:size: ", p), err) }
  if err := oprot.WriteI32(int32(p.Size)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.size (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:size: ", p), err) }
  return err
}

func (p *BFSS_APIDReadArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("offset", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:offset: ", p), err) }
  if err := oprot.WriteI32(int32(p.Offset)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.offset (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:offset: ", p), err) }
  return err
}

func (p *BFSS_APIDReadArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BFSS_APIDReadArgs(%+v)", *p)
}

// Attributes:
//  - Success
type BFSS_APIDReadResult struct {
  Success *READ_RESULT `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewBFSS_APIDReadResult() *BFSS_APIDReadResult {
  return &BFSS_APIDReadResult{}
}

var BFSS_APIDReadResult_Success_DEFAULT *READ_RESULT
func (p *BFSS_APIDReadResult) GetSuccess() *READ_RESULT {
  if !p.IsSetSuccess() {
    return BFSS_APIDReadResult_Success_DEFAULT
  }
return p.Success
}
func (p *BFSS_APIDReadResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *BFSS_APIDReadResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BFSS_APIDReadResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &READ_RESULT{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *BFSS_APIDReadResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("Read_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BFSS_APIDReadResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *BFSS_APIDReadResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BFSS_APIDReadResult(%+v)", *p)
}

// Attributes:
//  - Oid
//  - Size
//  - Offset
type BFSS_APIDReadBlkArgs struct {
  Oid string `thrift:"oid,1" db:"oid" json:"oid"`
  Size int32 `thrift:"size,2" db:"size" json:"size"`
  Offset int32 `thrift:"offset,3" db:"offset" json:"offset"`
}

func NewBFSS_APIDReadBlkArgs() *BFSS_APIDReadBlkArgs {
  return &BFSS_APIDReadBlkArgs{}
}


func (p *BFSS_APIDReadBlkArgs) GetOid() string {
  return p.Oid
}

func (p *BFSS_APIDReadBlkArgs) GetSize() int32 {
  return p.Size
}

func (p *BFSS_APIDReadBlkArgs) GetOffset() int32 {
  return p.Offset
}
func (p *BFSS_APIDReadBlkArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BFSS_APIDReadBlkArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Oid = v
}
  return nil
}

func (p *BFSS_APIDReadBlkArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Size = v
}
  return nil
}

func (p *BFSS_APIDReadBlkArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Offset = v
}
  return nil
}

func (p *BFSS_APIDReadBlkArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ReadBlk_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BFSS_APIDReadBlkArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("oid", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:oid: ", p), err) }
  if err := oprot.WriteString(string(p.Oid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.oid (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:oid: ", p), err) }
  return err
}

func (p *BFSS_APIDReadBlkArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("size", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:size: ", p), err) }
  if err := oprot.WriteI32(int32(p.Size)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.size (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:size: ", p), err) }
  return err
}

func (p *BFSS_APIDReadBlkArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("offset", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:offset: ", p), err) }
  if err := oprot.WriteI32(int32(p.Offset)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.offset (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:offset: ", p), err) }
  return err
}

func (p *BFSS_APIDReadBlkArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BFSS_APIDReadBlkArgs(%+v)", *p)
}

// Attributes:
//  - Success
type BFSS_APIDReadBlkResult struct {
  Success *READ_RESULT `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewBFSS_APIDReadBlkResult() *BFSS_APIDReadBlkResult {
  return &BFSS_APIDReadBlkResult{}
}

var BFSS_APIDReadBlkResult_Success_DEFAULT *READ_RESULT
func (p *BFSS_APIDReadBlkResult) GetSuccess() *READ_RESULT {
  if !p.IsSetSuccess() {
    return BFSS_APIDReadBlkResult_Success_DEFAULT
  }
return p.Success
}
func (p *BFSS_APIDReadBlkResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *BFSS_APIDReadBlkResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BFSS_APIDReadBlkResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &READ_RESULT{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *BFSS_APIDReadBlkResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ReadBlk_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BFSS_APIDReadBlkResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *BFSS_APIDReadBlkResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BFSS_APIDReadBlkResult(%+v)", *p)
}

// Attributes:
//  - Oid
type BFSS_APIDGetObjectBlksInfoArgs struct {
  Oid string `thrift:"oid,1" db:"oid" json:"oid"`
}

func NewBFSS_APIDGetObjectBlksInfoArgs() *BFSS_APIDGetObjectBlksInfoArgs {
  return &BFSS_APIDGetObjectBlksInfoArgs{}
}


func (p *BFSS_APIDGetObjectBlksInfoArgs) GetOid() string {
  return p.Oid
}
func (p *BFSS_APIDGetObjectBlksInfoArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BFSS_APIDGetObjectBlksInfoArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Oid = v
}
  return nil
}

func (p *BFSS_APIDGetObjectBlksInfoArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("GetObjectBlksInfo_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BFSS_APIDGetObjectBlksInfoArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("oid", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:oid: ", p), err) }
  if err := oprot.WriteString(string(p.Oid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.oid (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:oid: ", p), err) }
  return err
}

func (p *BFSS_APIDGetObjectBlksInfoArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BFSS_APIDGetObjectBlksInfoArgs(%+v)", *p)
}

// Attributes:
//  - Success
type BFSS_APIDGetObjectBlksInfoResult struct {
  Success *OBJECT_BLKS_RESULT `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewBFSS_APIDGetObjectBlksInfoResult() *BFSS_APIDGetObjectBlksInfoResult {
  return &BFSS_APIDGetObjectBlksInfoResult{}
}

var BFSS_APIDGetObjectBlksInfoResult_Success_DEFAULT *OBJECT_BLKS_RESULT
func (p *BFSS_APIDGetObjectBlksInfoResult) GetSuccess() *OBJECT_BLKS_RESULT {
  if !p.IsSetSuccess() {
    return BFSS_APIDGetObjectBlksInfoResult_Success_DEFAULT
  }
return p.Success
}
func (p *BFSS_APIDGetObjectBlksInfoResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *BFSS_APIDGetObjectBlksInfoResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BFSS_APIDGetObjectBlksInfoResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &OBJECT_BLKS_RESULT{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *BFSS_APIDGetObjectBlksInfoResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("GetObjectBlksInfo_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BFSS_APIDGetObjectBlksInfoResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *BFSS_APIDGetObjectBlksInfoResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BFSS_APIDGetObjectBlksInfoResult(%+v)", *p)
}

// Attributes:
//  - Oid
//  - Offset
type BFSS_APIDGetObjectBlkKeyArgs struct {
  Oid string `thrift:"oid,1" db:"oid" json:"oid"`
  Offset int32 `thrift:"offset,2" db:"offset" json:"offset"`
}

func NewBFSS_APIDGetObjectBlkKeyArgs() *BFSS_APIDGetObjectBlkKeyArgs {
  return &BFSS_APIDGetObjectBlkKeyArgs{}
}


func (p *BFSS_APIDGetObjectBlkKeyArgs) GetOid() string {
  return p.Oid
}

func (p *BFSS_APIDGetObjectBlkKeyArgs) GetOffset() int32 {
  return p.Offset
}
func (p *BFSS_APIDGetObjectBlkKeyArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BFSS_APIDGetObjectBlkKeyArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Oid = v
}
  return nil
}

func (p *BFSS_APIDGetObjectBlkKeyArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Offset = v
}
  return nil
}

func (p *BFSS_APIDGetObjectBlkKeyArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("GetObjectBlkKey_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BFSS_APIDGetObjectBlkKeyArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("oid", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:oid: ", p), err) }
  if err := oprot.WriteString(string(p.Oid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.oid (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:oid: ", p), err) }
  return err
}

func (p *BFSS_APIDGetObjectBlkKeyArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("offset", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:offset: ", p), err) }
  if err := oprot.WriteI32(int32(p.Offset)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.offset (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:offset: ", p), err) }
  return err
}

func (p *BFSS_APIDGetObjectBlkKeyArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BFSS_APIDGetObjectBlkKeyArgs(%+v)", *p)
}

// Attributes:
//  - Success
type BFSS_APIDGetObjectBlkKeyResult struct {
  Success *BLK_KEY_RESULT `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewBFSS_APIDGetObjectBlkKeyResult() *BFSS_APIDGetObjectBlkKeyResult {
  return &BFSS_APIDGetObjectBlkKeyResult{}
}

var BFSS_APIDGetObjectBlkKeyResult_Success_DEFAULT *BLK_KEY_RESULT
func (p *BFSS_APIDGetObjectBlkKeyResult) GetSuccess() *BLK_KEY_RESULT {
  if !p.IsSetSuccess() {
    return BFSS_APIDGetObjectBlkKeyResult_Success_DEFAULT
  }
return p.Success
}
func (p *BFSS_APIDGetObjectBlkKeyResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *BFSS_APIDGetObjectBlkKeyResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BFSS_APIDGetObjectBlkKeyResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &BLK_KEY_RESULT{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *BFSS_APIDGetObjectBlkKeyResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("GetObjectBlkKey_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BFSS_APIDGetObjectBlkKeyResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *BFSS_APIDGetObjectBlkKeyResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BFSS_APIDGetObjectBlkKeyResult(%+v)", *p)
}

// Attributes:
//  - CmdId
//  - Param
//  - Data
type BFSS_APIDManageMessageArgs struct {
  CmdId int32 `thrift:"CmdId,1" db:"CmdId" json:"CmdId"`
  Param int32 `thrift:"Param,2" db:"Param" json:"Param"`
  Data []byte `thrift:"Data,3" db:"Data" json:"Data"`
}

func NewBFSS_APIDManageMessageArgs() *BFSS_APIDManageMessageArgs {
  return &BFSS_APIDManageMessageArgs{}
}


func (p *BFSS_APIDManageMessageArgs) GetCmdId() int32 {
  return p.CmdId
}

func (p *BFSS_APIDManageMessageArgs) GetParam() int32 {
  return p.Param
}

func (p *BFSS_APIDManageMessageArgs) GetData() []byte {
  return p.Data
}
func (p *BFSS_APIDManageMessageArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BFSS_APIDManageMessageArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.CmdId = v
}
  return nil
}

func (p *BFSS_APIDManageMessageArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Param = v
}
  return nil
}

func (p *BFSS_APIDManageMessageArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Data = v
}
  return nil
}

func (p *BFSS_APIDManageMessageArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ManageMessage_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BFSS_APIDManageMessageArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("CmdId", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:CmdId: ", p), err) }
  if err := oprot.WriteI32(int32(p.CmdId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.CmdId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:CmdId: ", p), err) }
  return err
}

func (p *BFSS_APIDManageMessageArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("Param", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:Param: ", p), err) }
  if err := oprot.WriteI32(int32(p.Param)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.Param (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:Param: ", p), err) }
  return err
}

func (p *BFSS_APIDManageMessageArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("Data", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:Data: ", p), err) }
  if err := oprot.WriteBinary(p.Data); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.Data (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:Data: ", p), err) }
  return err
}

func (p *BFSS_APIDManageMessageArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BFSS_APIDManageMessageArgs(%+v)", *p)
}

// Attributes:
//  - Success
type BFSS_APIDManageMessageResult struct {
  Success *MESSAGE_RESULT `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewBFSS_APIDManageMessageResult() *BFSS_APIDManageMessageResult {
  return &BFSS_APIDManageMessageResult{}
}

var BFSS_APIDManageMessageResult_Success_DEFAULT *MESSAGE_RESULT
func (p *BFSS_APIDManageMessageResult) GetSuccess() *MESSAGE_RESULT {
  if !p.IsSetSuccess() {
    return BFSS_APIDManageMessageResult_Success_DEFAULT
  }
return p.Success
}
func (p *BFSS_APIDManageMessageResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *BFSS_APIDManageMessageResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BFSS_APIDManageMessageResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &MESSAGE_RESULT{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *BFSS_APIDManageMessageResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ManageMessage_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BFSS_APIDManageMessageResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *BFSS_APIDManageMessageResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BFSS_APIDManageMessageResult(%+v)", *p)
}


