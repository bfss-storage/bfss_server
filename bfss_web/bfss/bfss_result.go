// Autogenerated by Thrift Compiler (0.12.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package bfss

import (
	"bytes"
	"context"
	"reflect"
	"database/sql/driver"
	"errors"
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = context.Background
var _ = reflect.DeepEqual
var _ = bytes.Equal

type BFSS_RESULT int64
const (
  BFSS_RESULT_BFSS_DATA_READ_INCOMPLETE BFSS_RESULT = 1
  BFSS_RESULT_BFSS_DATA_WRITE_INCOMPLETE BFSS_RESULT = 2
  BFSS_RESULT_BFSS_SUCCESS BFSS_RESULT = 0
  BFSS_RESULT_BFSS_UNKNOWN_ERROR BFSS_RESULT = -255
  BFSS_RESULT_BFSS_PARAM_ERROR BFSS_RESULT = -51
  BFSS_RESULT_BFSS_SCHEME_ERROR BFSS_RESULT = -52
  BFSS_RESULT_BFSS_NO_SPACE BFSS_RESULT = -53
  BFSS_RESULT_BFSS_NO_MEMORY BFSS_RESULT = -54
  BFSS_RESULT_BFSS_TIMEOUT BFSS_RESULT = -55
  BFSS_RESULT_BFSS_NOTFOUND BFSS_RESULT = -60
  BFSS_RESULT_BFSS_DUPLICATED BFSS_RESULT = -61
  BFSS_RESULT_BFSS_COMPLETED BFSS_RESULT = -62
  BFSS_RESULT_BFSS_INCOMPLETED BFSS_RESULT = -63
  BFSS_RESULT_BFSS_DATA_WRITE_FAILED BFSS_RESULT = -70
  BFSS_RESULT_BFSS_DATA_READ_FAILED BFSS_RESULT = -71
  BFSS_RESULT_BFSS_DATA_COMPLETE_FAILED BFSS_RESULT = -72
  BFSS_RESULT_BFSS_DATA_UNINITED BFSS_RESULT = -73
)

func (p BFSS_RESULT) String() string {
  switch p {
  case BFSS_RESULT_BFSS_DATA_READ_INCOMPLETE: return "BFSS_DATA_READ_INCOMPLETE"
  case BFSS_RESULT_BFSS_DATA_WRITE_INCOMPLETE: return "BFSS_DATA_WRITE_INCOMPLETE"
  case BFSS_RESULT_BFSS_SUCCESS: return "BFSS_SUCCESS"
  case BFSS_RESULT_BFSS_UNKNOWN_ERROR: return "BFSS_UNKNOWN_ERROR"
  case BFSS_RESULT_BFSS_PARAM_ERROR: return "BFSS_PARAM_ERROR"
  case BFSS_RESULT_BFSS_SCHEME_ERROR: return "BFSS_SCHEME_ERROR"
  case BFSS_RESULT_BFSS_NO_SPACE: return "BFSS_NO_SPACE"
  case BFSS_RESULT_BFSS_NO_MEMORY: return "BFSS_NO_MEMORY"
  case BFSS_RESULT_BFSS_TIMEOUT: return "BFSS_TIMEOUT"
  case BFSS_RESULT_BFSS_NOTFOUND: return "BFSS_NOTFOUND"
  case BFSS_RESULT_BFSS_DUPLICATED: return "BFSS_DUPLICATED"
  case BFSS_RESULT_BFSS_COMPLETED: return "BFSS_COMPLETED"
  case BFSS_RESULT_BFSS_INCOMPLETED: return "BFSS_INCOMPLETED"
  case BFSS_RESULT_BFSS_DATA_WRITE_FAILED: return "BFSS_DATA_WRITE_FAILED"
  case BFSS_RESULT_BFSS_DATA_READ_FAILED: return "BFSS_DATA_READ_FAILED"
  case BFSS_RESULT_BFSS_DATA_COMPLETE_FAILED: return "BFSS_DATA_COMPLETE_FAILED"
  case BFSS_RESULT_BFSS_DATA_UNINITED: return "BFSS_DATA_UNINITED"
  }
  return "<UNSET>"
}

func BFSS_RESULTFromString(s string) (BFSS_RESULT, error) {
  switch s {
  case "BFSS_DATA_READ_INCOMPLETE": return BFSS_RESULT_BFSS_DATA_READ_INCOMPLETE, nil 
  case "BFSS_DATA_WRITE_INCOMPLETE": return BFSS_RESULT_BFSS_DATA_WRITE_INCOMPLETE, nil 
  case "BFSS_SUCCESS": return BFSS_RESULT_BFSS_SUCCESS, nil 
  case "BFSS_UNKNOWN_ERROR": return BFSS_RESULT_BFSS_UNKNOWN_ERROR, nil 
  case "BFSS_PARAM_ERROR": return BFSS_RESULT_BFSS_PARAM_ERROR, nil 
  case "BFSS_SCHEME_ERROR": return BFSS_RESULT_BFSS_SCHEME_ERROR, nil 
  case "BFSS_NO_SPACE": return BFSS_RESULT_BFSS_NO_SPACE, nil 
  case "BFSS_NO_MEMORY": return BFSS_RESULT_BFSS_NO_MEMORY, nil 
  case "BFSS_TIMEOUT": return BFSS_RESULT_BFSS_TIMEOUT, nil 
  case "BFSS_NOTFOUND": return BFSS_RESULT_BFSS_NOTFOUND, nil 
  case "BFSS_DUPLICATED": return BFSS_RESULT_BFSS_DUPLICATED, nil 
  case "BFSS_COMPLETED": return BFSS_RESULT_BFSS_COMPLETED, nil 
  case "BFSS_INCOMPLETED": return BFSS_RESULT_BFSS_INCOMPLETED, nil 
  case "BFSS_DATA_WRITE_FAILED": return BFSS_RESULT_BFSS_DATA_WRITE_FAILED, nil 
  case "BFSS_DATA_READ_FAILED": return BFSS_RESULT_BFSS_DATA_READ_FAILED, nil 
  case "BFSS_DATA_COMPLETE_FAILED": return BFSS_RESULT_BFSS_DATA_COMPLETE_FAILED, nil 
  case "BFSS_DATA_UNINITED": return BFSS_RESULT_BFSS_DATA_UNINITED, nil 
  }
  return BFSS_RESULT(0), fmt.Errorf("not a valid BFSS_RESULT string")
}


func BFSS_RESULTPtr(v BFSS_RESULT) *BFSS_RESULT { return &v }

func (p BFSS_RESULT) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *BFSS_RESULT) UnmarshalText(text []byte) error {
q, err := BFSS_RESULTFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *BFSS_RESULT) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = BFSS_RESULT(v)
return nil
}

func (p * BFSS_RESULT) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
